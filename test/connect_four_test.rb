require "test_helper"

describe ConnectFour do
  subject { ConnectFour }

  it "runs" do
    assert subject.run
  end

  # Tests for class WinnerDetection:

  it "runs detectVictory" do
    assert subject::Move::NewWinnerDetection.detectVictory([1], 3, 4, "x")
  end

  it "detects winner" do
    assert_equal "winner", subject::Move::NewWinnerDetection.detectVictory(
    [[".", ".", ".", ".", ".", ".", ".", "."], 
    [".", ".", ".", ".", ".", ".", ".", "."], 
    [".", ".", ".", ".", ".", ".", ".", "."], 
    [".", ".", ".", ".", ".", ".", ".", "."], 
    [".", ".", ".", ".", ".", ".", ".", "."], 
    [".", ".", ".", ".", ".", ".", ".", "."], 
    [".", ".", ".", ".", ".", ".", ".", "."], 
    ["x", "x", "x", "x", ".", ".", ".", "."]], 7, 3, "x")

    assert_equal "winner", subject::Move::NewWinnerDetection.detectVictory(
    [[".", ".", ".", ".", ".", ".", ".", "."], 
    [".", ".", ".", ".", ".", ".", ".", "."], 
    [".", ".", ".", ".", ".", ".", ".", "."], 
    [".", ".", ".", ".", ".", ".", ".", "."], 
    [".", ".", ".", ".", ".", ".", ".", "."], 
    [".", ".", ".", ".", ".", ".", ".", "."], 
    [".", ".", ".", ".", ".", ".", ".", "."], 
    ["x", "x", "x", "x", ".", ".", ".", "."]], 7, 0, "x")

    assert_equal "winner", subject::Move::NewWinnerDetection.detectVictory(
    [[".", ".", ".", ".", ".", ".", ".", "."], 
    [".", ".", ".", ".", ".", ".", ".", "."], 
    [".", ".", ".", ".", ".", ".", ".", "."], 
    [".", ".", ".", ".", ".", ".", ".", "."], 
    [".", ".", ".", "x", ".", ".", ".", "."], 
    [".", ".", "x", "o", ".", ".", ".", "."], 
    [".", "x", "o", "x", ".", ".", ".", "."], 
    ["x", "o", "x", "o", "o", ".", ".", "."]], 5, 2, "x")

    assert_equal "winner", subject::Move::NewWinnerDetection.detectVictory(
    [[".", ".", ".", ".", ".", ".", ".", "."], 
    [".", ".", ".", ".", ".", ".", ".", "."], 
    [".", ".", ".", ".", ".", ".", ".", "."], 
    [".", ".", ".", ".", ".", ".", ".", "."], 
    [".", ".", ".", "x", ".", ".", ".", "."], 
    [".", ".", ".", "o", "x", ".", ".", "."], 
    [".", ".", ".", "x", "o", "x", ".", "."], 
    [".", ".", ".", "o", "o", "o", "x", "."]], 5, 3, "x")

    assert_equal "winner", subject::Move::NewWinnerDetection.detectVictory(
    [[".", ".", ".", ".", ".", ".", ".", "."], 
    [".", ".", ".", ".", ".", ".", ".", "."], 
    [".", ".", ".", ".", ".", ".", ".", "."], 
    [".", ".", ".", ".", ".", ".", ".", "."], 
    [".", ".", ".", "x", ".", ".", ".", "."], 
    [".", ".", ".", "o", "x", ".", ".", "."], 
    [".", ".", ".", "x", "o", "x", ".", "."], 
    [".", ".", ".", "o", "o", "o", "x", "."]], 7, 6, "x")
  end

end
